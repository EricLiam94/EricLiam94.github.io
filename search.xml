<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Customize and handle a Promise</title>
      <link href="/2020/03/08/promise/"/>
      <url>/2020/03/08/promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise is a very common object that web developers constantly face when developing website.</p><blockquote><p>According to MDN, The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.</p></blockquote><h2 id="Customize"><a href="#Customize" class="headerlink" title="Customize"></a>Customize</h2><p>To build a promise, we should understand the further operations for both success and fail. Example are given below</p><pre><code class="javaScript">    function divide(a,b){        return new Promise( function(resolve,reject) {                if(b===0){                    reject(&quot;divide by 0&quot;) // when the promise is failed                    return                }                resolve(a/b) // when the promise processes succussfully        })    }    divide(10,1)     .then(res =&gt;  console.log(`the result is ${res}`))     .catch(err =&gt; console.log(err))    //  log the result is 10    divide(10,0)     .then(res =&gt;  console.log(`the result is ${res}`))     .catch(err =&gt; console.log(err))    // divide by 0</code></pre><h2 id="Handle-Promise"><a href="#Handle-Promise" class="headerlink" title="Handle Promise"></a>Handle Promise</h2><p>As you can see above, it can be done by a synchronous way <code>.then</code> and <code>.catch</code></p><p>Besides, there is an asynchronous method to deal with Promise</p><pre><code class="javaScript">    const checkRes = async (a,b) =&gt;{        try {            let res = await divide(a,b)            console.log(res)        } catch (error) {            console.log(error)        }    }    checkRes(10,2) // 2    checkRes(10,0) // divide by 0</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Difference? var, let and const</title>
      <link href="/2020/03/08/variables/"/>
      <url>/2020/03/08/variables/</url>
      
        <content type="html"><![CDATA[<h1 id="Var"><a href="#Var" class="headerlink" title="Var"></a>Var</h1><p><strong>var</strong> variables can be redefined or updated.</p><pre><code class="javaScript">    var width = 100;    console.log(width); // 100    var width = 200;    console.log(width); // 200</code></pre><p>Same variable name would not result in error.</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><blockquote><p>they’re function scope, which means that they are only available inside the function that they are created in. However, if they are not declared in a function, then they are globally scoped, and they’re available in the whole window.</p></blockquote><h2 id="Variable-Hoisting"><a href="#Variable-Hoisting" class="headerlink" title="Variable Hoisting"></a>Variable Hoisting</h2><p>Another feature of var is variable hoisting which allows a variable declared after it has been used.</p><pre><code class="javaScript">    x = 5; // Assign 5 to x    console.log(x)  // log 5    var x; // Declare x</code></pre><p>Whereas let and const don’t support such feature.</p><h1 id="let-and-const"><a href="#let-and-const" class="headerlink" title="let and const"></a>let and const</h1><h2 id="Scope-1"><a href="#Scope-1" class="headerlink" title="Scope"></a>Scope</h2><blockquote><p>let and const are block scope, which means any time you’ve got a set of curly brackets you have block scope.</p></blockquote><pre><code class="javaScript">    const key = &#39;abc123&#39;;    let points = 50;    let winner = false;    if(points &gt; 40) {       let winner = true    }    console.log(winner)  // log false</code></pre><h2 id="Immutable"><a href="#Immutable" class="headerlink" title="Immutable"></a>Immutable</h2><p>let variables are mutable which means the values of variables can be updated later</p><pre><code class="javaScript">let name = &quot;eric&quot;name = &quot;jack&quot;console.log(name)  // log &quot;Jack&quot;</code></pre><p>const variables are immutable resulting in their values can not be updated</p><pre><code class="javaScript">    const age = 18    age = 20  // error occurs</code></pre><p>However, if a JavaScipt is declared with const varibale. the value inside can be updated. For example,</p><pre><code class="javaScript">    const dog = {name:&quot;mimi&quot;,age:&quot;4&quot;}    dog.name = &quot;kiki&quot;    console.log(dog)  // log { name: &#39;kiki&#39;, age: &#39;4&#39; }</code></pre><p>So if you do want to a JavaScript object immutable, the following code can help:</p><pre><code class="javaScript">    const wes = Object.freeze(dog);    console.log(wes)  // log {name:&quot;kiki&quot;,age:&quot;4&quot;}    wes.name = &quot;new name&quot;    console.log(wes)  // still log {name:&quot;kiki&quot;,age:&quot;4&quot;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Build your own Blog and host in Github</title>
      <link href="/2019/11/30/hexo-build/"/>
      <url>/2019/11/30/hexo-build/</url>
      
        <content type="html"><![CDATA[<h1 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a><strong>Preview</strong></h1><p>Building own blog is benefitial for seeking a job, especially a CS related job. It records your achievements and reflects your learning journey. In addition, you can use blog to share your ideas and make friends. This post shares my experience establishing the blog website.</p><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a><strong>Prerequisite</strong></h1><ol><li>Node.js is installed</li><li>JavaScript Knowledge is required</li><li>Git</li></ol><h1 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a><strong>Install Hexo</strong></h1><p>Hexo is a fast, simple and powerful blog framework, which helps you establish a blog website in a short time.<br>In windows terminal, using <strong>npm</strong> to install hexo.</p><pre><code class="shell">npm install hexo-cli -g</code></pre><h1 id="Initialize-Hexo"><a href="#Initialize-Hexo" class="headerlink" title="Initialize Hexo"></a><strong>Initialize Hexo</strong></h1><p>After installation, we can start to build the first blog website. In the terminal, direct to the folder you want to store the website. Then, type the following command.</p><pre><code class="bash">    hexo init yourFolderName</code></pre><p>This will take seconds to initialize the hexo folder.</p><h1 id="Introduction-of-Hexo-Framework"><a href="#Introduction-of-Hexo-Framework" class="headerlink" title="Introduction of Hexo Framework"></a><strong>Introduction of Hexo Framework</strong></h1><p>Hexo provides a clear stureture for users. they can customize some components without interupting others.<br>There are four marjor components: <strong>scaffolds</strong>, <strong>source</strong>, <strong>themes</strong> and <strong>_config.yml</strong>.</p><h2 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a><strong>scaffolds</strong></h2><p>It provides the template of draft, post and page. These templates can be modified to fit your own style. Also, your can build new template.</p><img src="/2019/11/30/hexo-build/scaffolds.png" class="" title="there main templates in scaffolds"><h2 id="source"><a href="#source" class="headerlink" title="source"></a><strong>source</strong></h2><p>This contains your blog content, and you will spend most of time on it.</p><img src="/2019/11/30/hexo-build/source.png" class="" title="source folder"><p>To create create new content, direct to your root directory of Hexo folder and type following code in terminal.</p><pre><code class="bash">hexo new yourFileName</code></pre><p>By default, hexo will create a post in source/_posts folder.<br>To create other types of content (draft or page), specify the type after <code>new</code>.</p><ul><li>Create a post</li></ul><pre><code class="bash">hexo new post yourPostName</code></pre><ul><li>Create a draft</li></ul><pre><code class="bash">hexo new draft yourDraftName</code></pre><ul><li>Create a web page</li></ul><pre><code class="bash">hexo new page yourPageName</code></pre><p>The content should be written in <a href="https://www.markdownguide.org/" target="_blank" rel="noopener">Markdown Language</a></p><p><strong>All types should correspond to the type name in scaffolds</strong>.</p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a><strong>themes</strong></h2><p>This folder contains front-end code. You can cutomize your own theme or use themes from <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Theme Market</a>.</p><hr><p>You can change your theme in <code>config.yml</code>.</p><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a><strong>_config.yml</strong></h2><p>this file stores configuration of your entire blog website, such as your blog name.</p><img src="/2019/11/30/hexo-build/config.png" class="" title="config.yml"><h1 id="Hosting-your-website"><a href="#Hosting-your-website" class="headerlink" title="Hosting your website"></a><strong>Hosting your website</strong></h1><h2 id="Create-a-new-repository-in-Github"><a href="#Create-a-new-repository-in-Github" class="headerlink" title="Create a new repository in Github"></a>Create a new repository in Github</h2><p>The repository name should strictly follow the structure of <code>yourGitHubName.github.io</code></p><blockquote><p>For me, my github name is EricLiam94, so my repository name would be <strong>EricLiam94.github.io</strong></p></blockquote><img src="/2019/11/30/hexo-build/Repository.png" class="" title="repository name"><h2 id="Link-to-your-github"><a href="#Link-to-your-github" class="headerlink" title="Link to your github"></a><strong>Link to your github</strong></h2><p>In your <strong>_config.yml</strong> file, fill the deploy session as following.</p><img src="/2019/11/30/hexo-build/git_config.png" class="" title="link to github"><p>you can directly copy the repo from your github repository:</p><img src="/2019/11/30/hexo-build/github.png" class="" title="link to github"><h2 id="install-hexo-deployer-git-and-depoly-your-site-onto-Github"><a href="#install-hexo-deployer-git-and-depoly-your-site-onto-Github" class="headerlink" title="install hexo-deployer-git and depoly your site onto Github"></a><strong>install hexo-deployer-git and depoly your site onto Github</strong></h2><p>First, we need to install <strong>hexo-deployer-git</strong> .</p><pre><code class="bash">    npm install hexo-deployer-git --save</code></pre><p>After installation, we can start to depoly our website.</p><pre><code class="bash">    hexo clean    hexo generate    hexo deploy</code></pre><hr><p>Finally, we create our first blog website. To visit the website, just input the repository name as url address. Also you can replace the domain with your own domain in Repository setting and use CNAME to reference it.</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shuffle</title>
      <link href="/2019/11/30/not-test/"/>
      <url>/2019/11/30/not-test/</url>
      
        <content type="html"><![CDATA[<ul><li>Shuffle(Python)</li></ul><pre><code class="python">from copy import deepcopyfrom random import randintdef shuffle(lst):    temp_lst = deepcopy(lst)    m = len(temp_lst)    while (m):        m -= 1        i = randint(0, m)        temp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m]    return temp_lst</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test Post</title>
      <link href="/2019/11/29/first/"/>
      <url>/2019/11/29/first/</url>
      
        <content type="html"><![CDATA[<h1 id="Test-Code"><a href="#Test-Code" class="headerlink" title="Test Code"></a>Test Code</h1><pre><code class="json">{  &quot;x&quot;: 123,  &quot;d&quot;: 333}</code></pre><h1 id="Test-Tasks"><a href="#Test-Tasks" class="headerlink" title="Test Tasks"></a>Test Tasks</h1><ul><li><input checked="" disabled="" type="checkbox"> Write the press release</li><li><input disabled="" type="checkbox"> Update the website</li><li><input disabled="" type="checkbox"> Contact the media</li></ul><h1 id="Test-youtube"><a href="#Test-youtube" class="headerlink" title="Test youtube"></a>Test youtube</h1><div class="video-container"><iframe src="//www.youtube.com/embed/4wwVghdR-ho" frameborder="0" allowfullscreen></iframe></div><h1 id="Test-Link"><a href="#Test-Link" class="headerlink" title="Test Link"></a>Test Link</h1><p><a href="https://www.google.com" target="_blank" rel="noopener">Test link</a></p><h1 id="Test-Image"><a href="#Test-Image" class="headerlink" title="Test Image"></a>Test Image</h1><img src="https://helpx.adobe.com/content/dam/help/en/stock/how-to/visual-reverse-image-search/jcr_content/main-pars/image/visual-reverse-image-search-v2_intro.jpg" class="img"><h1 id="Test-Post-Link"><a href="#Test-Post-Link" class="headerlink" title="Test Post Link"></a>Test Post Link</h1><a href="/2019/11/30/hexo-build/" title="Build your own Blog">Build your own Blog</a>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
